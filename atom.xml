<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aoianz.github.io/</id>
    <title>Aoian</title>
    <updated>2021-01-12T01:32:56.124Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://aoianz.github.io/"/>
    <link rel="self" href="https://aoianz.github.io/atom.xml"/>
    <subtitle>I am Aoian</subtitle>
    <logo>https://aoianz.github.io/images/avatar.png</logo>
    <icon>https://aoianz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Aoian</rights>
    <entry>
        <title type="html"><![CDATA[朝花夕拾 Mysql笔记1]]></title>
        <id>https://aoianz.github.io/post/zhao-hua-xi-shi-mysql-bi-ji-1/</id>
        <link href="https://aoianz.github.io/post/zhao-hua-xi-shi-mysql-bi-ji-1/">
        </link>
        <updated>2021-01-11T14:18:18.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="朝花夕拾-mysql笔记1">朝花夕拾 Mysql笔记1###</h3>
<p><strong>2.1数据库基础知识</strong></p>
<blockquote>
<p>1.Dos登录</p>
</blockquote>
<p>命令:mysql -h hostname -u username -p</p>
<p>例如:mysql -h 123 -uroot -p</p>
<p>简写:mysql -u root -p</p>
<blockquote>
<p>关系型数据库语言<br>
(1)数据定义语言(DDL) 创建表创建数据库<br>
(2) 数据操作语言(DML) 对数据进行操作<br>
(3) 数据查询语言(DQL)单表查询，多表查询<br>
(4) 数据控制语言(DCL) 对权限进行控制</p>
</blockquote>
<hr>
<h5 id="211创建和查看数据库">2.1.1创建和查看数据库</h5>
<ul>
<li>创建数据库</li>
</ul>
<pre><code class="language-sql">语法:create database 数据库名称;
create database itcast;/*创建数据库itcast:*/
</code></pre>
<ul>
<li>查看数据库</li>
</ul>
<pre><code class="language-sql">语法:show databases/*查看数据库*/
</code></pre>
<ul>
<li>查看某个数据库</li>
</ul>
<pre><code class="language-sql">语法:show create database 数据库名称;
例如:show create database itcase;/*查看数据库itcase信息*/
</code></pre>
<ul>
<li>使用数据库</li>
</ul>
<pre><code class="language-sql">语法:use 数据库名称;
例如:use itcast;/*使用数据库itcast*/
</code></pre>
<hr>
<h5 id="212修改数据库">2.1.2修改数据库</h5>
<ul>
<li>alter 数据库名称;修改数据库</li>
</ul>
<pre><code class="language-sql">语法:alter database 数据库名称 default character set 编码方式 collate 编码方式_bin
例如:修改数据库,将数据库itcast的编码修改为gbk
&gt; alter database itcast default character set gbk collate gbk_bin;
</code></pre>
<hr>
<h5 id="213删除数据库"><strong>2.1.3删除数据库</strong></h5>
<pre><code class="language-sql">语法:drop database 数据库名称;
例如:drop database itcast;/*删除名称为itcast的数据库*/
</code></pre>
<hr>
<h3 id="22数据类型"><strong>2.2数据类型</strong></h3>
<h4 id="221-整数类型">2.2.1 整数类型</h4>
<p>1.在MySQL数据库中，经常需要存储整数数值。根据数值取值范围的不同，MySQL中的整数类型可分为5种，分别是<br>
TINYINTtinyint、SMALLINT、 MEDIUMINT、INT和BIGINT。不同整数类型的取值范围可以根据字节数计算出来，例如，<br>
TINYINT类型的整数占用1个字节，1个字节是8位，那么，TINYINT类型无符号数的最大值就是28-1，即255。 同理可以算出其它不同整数类型的取值范围。</p>
<p><mark>**注意:**在足够使用的情况下选择选择尽量小的数据类型</mark></p>
<hr>
<h4 id="222浮点数类型与定点数类型">2.2.2浮点数类型与定点数类型</h4>
<p>2.在MySQL数据库中，存储的小数都是使用浮点数和定点数来表示的。浮点数的类型有两种，分别是单精度浮点数类型(float)和双精度浮点类型(double)。而<mark>定点数类型只有decimal</mark>，类型。</p>
<p>浮点型:非精准数据类型,有误差</p>
<p>定点型:精准类型</p>
<hr>
<h4 id="223日期与时间类型">2.2.3日期与时间类型</h4>
<p>3.为了方便在数据库中存储日期和时间，MySQL提供了表示日期和时间的数据类型,分别是YEAR、DATE、TIME、DATETIME和timestamp</p>
<p>year:1字节</p>
<p>例如:year 2014 ='2014'  p35</p>
<p>'00'~'69'   20??   58= 2058</p>
<p>'70'~'99'  19??    89 =1989</p>
<p>1.YEAR类型:(字符串类型与数字类型)'2020'	2020	'00-99'	1-99</p>
<p>2.DATE类型: '2020-06-21' 	'20200621'</p>
<p>current_data或now()<em>/表示<mark>当前日期</mark></em>/</p>
<p>3.TIME类型:表示时间值</p>
<blockquote>
<p>格式:HH:MM:SS</p>
</blockquote>
<p>current_data或now()表示当前<mark>系统时间</mark></p>
<p>4.DATATIME类型</p>
<p>now()表示当前<mark>日期和时间</mark></p>
<p>5.TIMESTAMP类型</p>
<p>与DATATIME类型显示形式相似,但取值范围比DATATIME类型小</p>
<hr>
<h4 id="224-字符串和二进制类型">2.2.4 字符串和二进制类型</h4>
<p>为了存储字符串、图片和声音等数据，MySQL提供了字符串和二进制类型。包括CHAR和VARCHAR类型、BINARY和VARBINARY类型、TEXT类型、BLOB类型ENUM类型、SET类型和BIT类型</p>
<h5 id="1char和varchar类型">1.CHAR和VARCHAR类型:</h5>
<pre><code>CHAR和VARCHAR类型都用来表示字符串数据,VARCHAR可以储存可变字符串
</code></pre>
<blockquote>
<p>语法:CHAR(M)或VARVCHAR(M)		M指字符串的最大长度;</p>
<p>VARCHAR(4)所对应的数据所占用的字节数为实际长度加1;</p>
<p>char:浪费时间,但查询速度快;</p>
<p>varchar:节约空间,但查询速度慢</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">''</th>
<th style="text-align:left">''</th>
<th>4个字节</th>
<th>''</th>
<th>1个字节</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">'ab'</td>
<td style="text-align:left">'ab'</td>
<td>4个字节</td>
<td>'ab'</td>
<td>2个字节</td>
</tr>
<tr>
<td style="text-align:left">'abc'</td>
<td style="text-align:left">'abc'</td>
<td>4个字节</td>
<td>'abc'</td>
<td>3个字节</td>
</tr>
<tr>
<td style="text-align:left">'abcd'</td>
<td style="text-align:left">'abcd'</td>
<td>4个字节</td>
<td>'abcd'</td>
<td>4个字节</td>
</tr>
<tr>
<td style="text-align:left">'abcdef'</td>
<td style="text-align:left">'abcd'</td>
<td>4个字节</td>
<td>'abcd'</td>
<td>5个字节</td>
</tr>
</tbody>
</table>
<hr>
<h5 id="2binary和varbinary类型">2.BINARY和VARBINARY类型:</h5>
<pre><code>BINARY和VARBINARY类型类似CHAR和VARCHAR类型,不同的是,它们表示二进制数据
</code></pre>
<blockquote>
<p>语法:BINARY(M)或VARBINARY(M)	M指二进制数据的最大字节长度;</p>
<p>注意:BINARY类型的长度是固定的,如果数据的长度不足最大长度,将在<mark>数据的后面</mark>用&quot;\0&quot;补齐,最终达到指定长度.</p>
<p>例如,指定数据的类型是BINARY(3),当插入a时,实际储存的数据为&quot;a\0\0&quot;,当插入ab时,实际储存的数据是&quot;ab\0&quot;;</p>
</blockquote>
<hr>
<h5 id="3text类型">3.TEXT类型:</h5>
<p>TEXT类型用来表示大文本数据,例如,文章内容、评论等,它的类型分为4种;</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT</td>
<td>0-255字节</td>
<td>MEDIUMTEXT</td>
<td>0-16777215字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65535字节</td>
<td>LONGTEXT</td>
<td>0-4294967295字节</td>
</tr>
</tbody>
</table>
<hr>
<h5 id="4blob类型">4.BLOB类型:</h5>
<pre><code>BLOB类型是一种特殊的二进制类型,它用于表示数据量大很大的二进制数据,例如 图片、PDF文档等
</code></pre>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>0-255字节</td>
<td>MEDIUMBLOB</td>
<td>0-16777215</td>
</tr>
<tr>
<td>BIOB</td>
<td>0-65535字节</td>
<td>LONGBILOB</td>
<td>4294967295</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意:BLOB类型数据是根据二进制编码进行比较和排序,而TEXT类型数据是根据文本模式进行比较和排序</p>
</blockquote>
<hr>
<h5 id="5enum类型">5.ENUM类型:</h5>
<p>ENUM类型又称为枚举类型</p>
<blockquote>
<p>ENUM('值1','值2','值3',...'值n')</p>
<p>注意:MYSQL中存入的是这个顺序编号,而不是列表中的值</p>
</blockquote>
<hr>
<h5 id="6set类型">6.SET类型:</h5>
<p>SET类型用于表示字符串对象,它的值可以有零个或多个,SET类型数据的定义格式与ENUM类型相似</p>
<blockquote>
<p>语法:SET('值1','值2','值3',...'值n')</p>
<p>注意:MYSQL中存入的是这个顺序编号,而不是列表中的值</p>
</blockquote>
<hr>
<h5 id="7bit类型">7.BIT类型:</h5>
<pre><code>用于表示二进制数据
</code></pre>
<blockquote>
<p>语法:BIT(M)			M用于表示每个值的位数,范围是1-64;</p>
<p>注意:如果分配的BIT(M)类型的数据的长度小于M,将在数据的<mark>左边用0补齐</mark></p>
<blockquote>
<p>例如,为BIT(6)分配值b'101'与分配b'000101'相同</p>
</blockquote>
</blockquote>
<hr>
<h2 id="23创建数据表">2.3创建数据表</h2>
<pre><code class="language-sql">create database student;/*创建名为student*/
use itcase;/*使用数据库*/
create TABLE tb_grade/*创建名为tb_gradea的数据表*/
(
	id INT(11),/*举例*/
	name VARCHER(20),
	grade FLOAT
);
show tables;/*验证数据库是否创建成功*/ 
show create table tb_greade;/*查看数据表创建时的定义语句,查看表的字符编码*/
describe tb_greade;/*查看表的字段信息,包括字段名、字段类型等信息*/
</code></pre>
<blockquote>
<h4 id="修改数据表">修改数据表</h4>
</blockquote>
<pre><code>	1.修改表名;
</code></pre>
<pre><code class="language-sql">alter table 表名 rename 新表名;
alter table tb_grade rename(to) grade;
</code></pre>
<pre><code>	2.修改字段名;
</code></pre>
<pre><code class="language-sql">alter table 表名 change 旧字段名 新字段名 新数据类型;
alter table grade change name username verchar(20);/*name字段改为username,数据类型保持不变*/
desc greade;/*验证*/
</code></pre>
<pre><code>	3.修改字段的数据类型;
</code></pre>
<pre><code class="language-sql">alter table 表名 modify 字段名 数据类型;
alter table grade modify id int(20);/**/
</code></pre>
<pre><code>	4.添加字段;
</code></pre>
<pre><code class="language-sql">alter table 表名 add 新字段名 数据类型
	[约束条件][first|after 已存在的字段名]
alter table grade add age int(10);
alter table grade add age int(10) first;/*添加到第一位*/
alter table grade add age int(10) after id/*添加到id后面*/;
alter table grade add age int(10) not null first;/*不允许为空*/
</code></pre>
<pre><code>	5.删除字段;
</code></pre>
<pre><code class="language-sql">alter table 表名 drop 字段名;
alter table grade drop age;
</code></pre>
<pre><code>	6.修改字段的排列位置;
</code></pre>
<pre><code class="language-sql">alter table 表名 modify 字段名1 数据类型 first|after 字段名2;
字段名1 指要修改位置的字段;
first是可选参数,指的是将字段1修改为表的第一个字段;
after 字段名2 是将字段1插入到字段2后面;
alter table grade modify id int(10) after grade;/*将id字段插入到grade字段后面*/
</code></pre>
<hr>
<blockquote>
<h4 id="删除数据表">删除数据表</h4>
</blockquote>
<pre><code class="language-sql">drop table 表名;
drop table grade;
desc table grade;/*验证*/
</code></pre>
<hr>
<h2 id="24表的约束"><strong>2.4表的约束</strong></h2>
<ul>
<li>防止数据表中插入错误的数值,而定义的维护数据库完整性的规则</li>
</ul>
<table>
<thead>
<tr>
<th><strong>约束条件</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMARY KEY</td>
<td>主键约束，用于唯一标识对应的记录(主键唯一表示,值不能为空null );</td>
</tr>
<tr>
<td>FOREIGN KEY</td>
<td>外键约束</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>非空约束</td>
</tr>
<tr>
<td>UNIQUE</td>
<td>唯一性约束</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值约束，用于设置字段的默认值</td>
</tr>
</tbody>
</table>
<h4 id="241-主键约束">2.4.1 主键约束;</h4>
<p><mark>注意:每个数据表中最多只能有一个主键约束,定义为primary key的字段不能有重复值且不能为null值</mark></p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="朝花夕拾-mysql笔记1">朝花夕拾 Mysql笔记1###</h3>
<p><strong>2.1数据库基础知识</strong></p>
<blockquote>
<p>1.Dos登录</p>
</blockquote>
<p>命令:mysql -h hostname -u username -p</p>
<p>例如:mysql -h 123 -uroot -p</p>
<p>简写:mysql -u root -p</p>
<blockquote>
<p>关系型数据库语言<br>
(1)数据定义语言(DDL) 创建表创建数据库<br>
(2) 数据操作语言(DML) 对数据进行操作<br>
(3) 数据查询语言(DQL)单表查询，多表查询<br>
(4) 数据控制语言(DCL) 对权限进行控制</p>
</blockquote>
<hr>
<h5 id="211创建和查看数据库">2.1.1创建和查看数据库</h5>
<ul>
<li>创建数据库</li>
</ul>
<pre><code class="language-sql">语法:create database 数据库名称;
create database itcast;/*创建数据库itcast:*/
</code></pre>
<ul>
<li>查看数据库</li>
</ul>
<pre><code class="language-sql">语法:show databases/*查看数据库*/
</code></pre>
<ul>
<li>查看某个数据库</li>
</ul>
<pre><code class="language-sql">语法:show create database 数据库名称;
例如:show create database itcase;/*查看数据库itcase信息*/
</code></pre>
<ul>
<li>使用数据库</li>
</ul>
<pre><code class="language-sql">语法:use 数据库名称;
例如:use itcast;/*使用数据库itcast*/
</code></pre>
<hr>
<h5 id="212修改数据库">2.1.2修改数据库</h5>
<ul>
<li>alter 数据库名称;修改数据库</li>
</ul>
<pre><code class="language-sql">语法:alter database 数据库名称 default character set 编码方式 collate 编码方式_bin
例如:修改数据库,将数据库itcast的编码修改为gbk
&gt; alter database itcast default character set gbk collate gbk_bin;
</code></pre>
<hr>
<h5 id="213删除数据库"><strong>2.1.3删除数据库</strong></h5>
<pre><code class="language-sql">语法:drop database 数据库名称;
例如:drop database itcast;/*删除名称为itcast的数据库*/
</code></pre>
<hr>
<h3 id="22数据类型"><strong>2.2数据类型</strong></h3>
<h4 id="221-整数类型">2.2.1 整数类型</h4>
<p>1.在MySQL数据库中，经常需要存储整数数值。根据数值取值范围的不同，MySQL中的整数类型可分为5种，分别是<br>
TINYINTtinyint、SMALLINT、 MEDIUMINT、INT和BIGINT。不同整数类型的取值范围可以根据字节数计算出来，例如，<br>
TINYINT类型的整数占用1个字节，1个字节是8位，那么，TINYINT类型无符号数的最大值就是28-1，即255。 同理可以算出其它不同整数类型的取值范围。</p>
<p><mark>**注意:**在足够使用的情况下选择选择尽量小的数据类型</mark></p>
<hr>
<h4 id="222浮点数类型与定点数类型">2.2.2浮点数类型与定点数类型</h4>
<p>2.在MySQL数据库中，存储的小数都是使用浮点数和定点数来表示的。浮点数的类型有两种，分别是单精度浮点数类型(float)和双精度浮点类型(double)。而<mark>定点数类型只有decimal</mark>，类型。</p>
<p>浮点型:非精准数据类型,有误差</p>
<p>定点型:精准类型</p>
<hr>
<h4 id="223日期与时间类型">2.2.3日期与时间类型</h4>
<p>3.为了方便在数据库中存储日期和时间，MySQL提供了表示日期和时间的数据类型,分别是YEAR、DATE、TIME、DATETIME和timestamp</p>
<p>year:1字节</p>
<p>例如:year 2014 ='2014'  p35</p>
<p>'00'~'69'   20??   58= 2058</p>
<p>'70'~'99'  19??    89 =1989</p>
<p>1.YEAR类型:(字符串类型与数字类型)'2020'	2020	'00-99'	1-99</p>
<p>2.DATE类型: '2020-06-21' 	'20200621'</p>
<p>current_data或now()<em>/表示<mark>当前日期</mark></em>/</p>
<p>3.TIME类型:表示时间值</p>
<blockquote>
<p>格式:HH:MM:SS</p>
</blockquote>
<p>current_data或now()表示当前<mark>系统时间</mark></p>
<p>4.DATATIME类型</p>
<p>now()表示当前<mark>日期和时间</mark></p>
<p>5.TIMESTAMP类型</p>
<p>与DATATIME类型显示形式相似,但取值范围比DATATIME类型小</p>
<hr>
<h4 id="224-字符串和二进制类型">2.2.4 字符串和二进制类型</h4>
<p>为了存储字符串、图片和声音等数据，MySQL提供了字符串和二进制类型。包括CHAR和VARCHAR类型、BINARY和VARBINARY类型、TEXT类型、BLOB类型ENUM类型、SET类型和BIT类型</p>
<h5 id="1char和varchar类型">1.CHAR和VARCHAR类型:</h5>
<pre><code>CHAR和VARCHAR类型都用来表示字符串数据,VARCHAR可以储存可变字符串
</code></pre>
<blockquote>
<p>语法:CHAR(M)或VARVCHAR(M)		M指字符串的最大长度;</p>
<p>VARCHAR(4)所对应的数据所占用的字节数为实际长度加1;</p>
<p>char:浪费时间,但查询速度快;</p>
<p>varchar:节约空间,但查询速度慢</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">''</th>
<th style="text-align:left">''</th>
<th>4个字节</th>
<th>''</th>
<th>1个字节</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">'ab'</td>
<td style="text-align:left">'ab'</td>
<td>4个字节</td>
<td>'ab'</td>
<td>2个字节</td>
</tr>
<tr>
<td style="text-align:left">'abc'</td>
<td style="text-align:left">'abc'</td>
<td>4个字节</td>
<td>'abc'</td>
<td>3个字节</td>
</tr>
<tr>
<td style="text-align:left">'abcd'</td>
<td style="text-align:left">'abcd'</td>
<td>4个字节</td>
<td>'abcd'</td>
<td>4个字节</td>
</tr>
<tr>
<td style="text-align:left">'abcdef'</td>
<td style="text-align:left">'abcd'</td>
<td>4个字节</td>
<td>'abcd'</td>
<td>5个字节</td>
</tr>
</tbody>
</table>
<hr>
<h5 id="2binary和varbinary类型">2.BINARY和VARBINARY类型:</h5>
<pre><code>BINARY和VARBINARY类型类似CHAR和VARCHAR类型,不同的是,它们表示二进制数据
</code></pre>
<blockquote>
<p>语法:BINARY(M)或VARBINARY(M)	M指二进制数据的最大字节长度;</p>
<p>注意:BINARY类型的长度是固定的,如果数据的长度不足最大长度,将在<mark>数据的后面</mark>用&quot;\0&quot;补齐,最终达到指定长度.</p>
<p>例如,指定数据的类型是BINARY(3),当插入a时,实际储存的数据为&quot;a\0\0&quot;,当插入ab时,实际储存的数据是&quot;ab\0&quot;;</p>
</blockquote>
<hr>
<h5 id="3text类型">3.TEXT类型:</h5>
<p>TEXT类型用来表示大文本数据,例如,文章内容、评论等,它的类型分为4种;</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT</td>
<td>0-255字节</td>
<td>MEDIUMTEXT</td>
<td>0-16777215字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65535字节</td>
<td>LONGTEXT</td>
<td>0-4294967295字节</td>
</tr>
</tbody>
</table>
<hr>
<h5 id="4blob类型">4.BLOB类型:</h5>
<pre><code>BLOB类型是一种特殊的二进制类型,它用于表示数据量大很大的二进制数据,例如 图片、PDF文档等
</code></pre>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>0-255字节</td>
<td>MEDIUMBLOB</td>
<td>0-16777215</td>
</tr>
<tr>
<td>BIOB</td>
<td>0-65535字节</td>
<td>LONGBILOB</td>
<td>4294967295</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意:BLOB类型数据是根据二进制编码进行比较和排序,而TEXT类型数据是根据文本模式进行比较和排序</p>
</blockquote>
<hr>
<h5 id="5enum类型">5.ENUM类型:</h5>
<p>ENUM类型又称为枚举类型</p>
<blockquote>
<p>ENUM('值1','值2','值3',...'值n')</p>
<p>注意:MYSQL中存入的是这个顺序编号,而不是列表中的值</p>
</blockquote>
<hr>
<h5 id="6set类型">6.SET类型:</h5>
<p>SET类型用于表示字符串对象,它的值可以有零个或多个,SET类型数据的定义格式与ENUM类型相似</p>
<blockquote>
<p>语法:SET('值1','值2','值3',...'值n')</p>
<p>注意:MYSQL中存入的是这个顺序编号,而不是列表中的值</p>
</blockquote>
<hr>
<h5 id="7bit类型">7.BIT类型:</h5>
<pre><code>用于表示二进制数据
</code></pre>
<blockquote>
<p>语法:BIT(M)			M用于表示每个值的位数,范围是1-64;</p>
<p>注意:如果分配的BIT(M)类型的数据的长度小于M,将在数据的<mark>左边用0补齐</mark></p>
<blockquote>
<p>例如,为BIT(6)分配值b'101'与分配b'000101'相同</p>
</blockquote>
</blockquote>
<hr>
<h2 id="23创建数据表">2.3创建数据表</h2>
<pre><code class="language-sql">create database student;/*创建名为student*/
use itcase;/*使用数据库*/
create TABLE tb_grade/*创建名为tb_gradea的数据表*/
(
	id INT(11),/*举例*/
	name VARCHER(20),
	grade FLOAT
);
show tables;/*验证数据库是否创建成功*/ 
show create table tb_greade;/*查看数据表创建时的定义语句,查看表的字符编码*/
describe tb_greade;/*查看表的字段信息,包括字段名、字段类型等信息*/
</code></pre>
<blockquote>
<h4 id="修改数据表">修改数据表</h4>
</blockquote>
<pre><code>	1.修改表名;
</code></pre>
<pre><code class="language-sql">alter table 表名 rename 新表名;
alter table tb_grade rename(to) grade;
</code></pre>
<pre><code>	2.修改字段名;
</code></pre>
<pre><code class="language-sql">alter table 表名 change 旧字段名 新字段名 新数据类型;
alter table grade change name username verchar(20);/*name字段改为username,数据类型保持不变*/
desc greade;/*验证*/
</code></pre>
<pre><code>	3.修改字段的数据类型;
</code></pre>
<pre><code class="language-sql">alter table 表名 modify 字段名 数据类型;
alter table grade modify id int(20);/**/
</code></pre>
<pre><code>	4.添加字段;
</code></pre>
<pre><code class="language-sql">alter table 表名 add 新字段名 数据类型
	[约束条件][first|after 已存在的字段名]
alter table grade add age int(10);
alter table grade add age int(10) first;/*添加到第一位*/
alter table grade add age int(10) after id/*添加到id后面*/;
alter table grade add age int(10) not null first;/*不允许为空*/
</code></pre>
<pre><code>	5.删除字段;
</code></pre>
<pre><code class="language-sql">alter table 表名 drop 字段名;
alter table grade drop age;
</code></pre>
<pre><code>	6.修改字段的排列位置;
</code></pre>
<pre><code class="language-sql">alter table 表名 modify 字段名1 数据类型 first|after 字段名2;
字段名1 指要修改位置的字段;
first是可选参数,指的是将字段1修改为表的第一个字段;
after 字段名2 是将字段1插入到字段2后面;
alter table grade modify id int(10) after grade;/*将id字段插入到grade字段后面*/
</code></pre>
<hr>
<blockquote>
<h4 id="删除数据表">删除数据表</h4>
</blockquote>
<pre><code class="language-sql">drop table 表名;
drop table grade;
desc table grade;/*验证*/
</code></pre>
<hr>
<h2 id="24表的约束"><strong>2.4表的约束</strong></h2>
<ul>
<li>防止数据表中插入错误的数值,而定义的维护数据库完整性的规则</li>
</ul>
<table>
<thead>
<tr>
<th><strong>约束条件</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMARY KEY</td>
<td>主键约束，用于唯一标识对应的记录(主键唯一表示,值不能为空null );</td>
</tr>
<tr>
<td>FOREIGN KEY</td>
<td>外键约束</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>非空约束</td>
</tr>
<tr>
<td>UNIQUE</td>
<td>唯一性约束</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值约束，用于设置字段的默认值</td>
</tr>
</tbody>
</table>
<h4 id="241-主键约束">2.4.1 主键约束;</h4>
<p><mark>注意:每个数据表中最多只能有一个主键约束,定义为primary key的字段不能有重复值且不能为null值</mark></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://aoianz.github.io/post/hello-gridea/</id>
        <link href="https://aoianz.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></content>
    </entry>
</feed>